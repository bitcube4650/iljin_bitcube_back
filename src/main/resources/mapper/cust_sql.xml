<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cust">
	<select id="selectDupUserCnt" resultType="int">
		/* item.selectItemGrpList */
		SELECT	(
				SELECT	COUNT(1)
				FROM	T_CO_USER
				WHERE USER_ID = #{userId}
				)
				+
				(
				SELECT	COUNT(1)
				FROM	T_CO_CUST_USER
				WHERE	USER_ID = #{userId}
				)
	</select>
	
	<select id="selectTCoCustList_count" resultType="int">
		/* cust.selectTCoCustList_count */
		SELECT COUNT(1)
		<include refid="selectCustListSql" />
	</select>
	
	<select id="selectTCoCustList" resultType="camel">
		/* cust.selectTCoCustList */ 
		SELECT	A.CUST_CODE
		,		A.CUST_NAME
		,		(SELECT ITEM_NAME FROM T_CO_ITEM X WHERE X.ITEM_CODE = A.CUST_TYPE1)	AS CUST_TYPE1
		,		A.REGNUM
		,		A.PRES_NAME
		,		(SELECT USER_NAME FROM T_CO_CUST_USER X WHERE X.CUST_CODE = A.CUST_CODE AND X.USER_TYPE = '1' LIMIT 1)	AS USER_NAME
		,		DATE_FORMAT(A.CREATE_DATE, '%Y-%m-%d %H:%i')							AS CREATE_DATE
		,		A.CERT_YN
		<include refid="selectCustListSql" />
		ORDER BY A.CREATE_DATE DESC
		<if test="pageSize != null and pageSize != ''">
		LIMIT ${offset}, ${pageSize}
		</if>
	</select>
	
	<sql id="selectCustListSql">
		FROM T_CO_CUST_MASTER A
		INNER JOIN T_CO_CUST_IR B
			ON A.CUST_CODE = B.CUST_CODE
		WHERE	1=1
		<if test="interrelatedCustCode != null and interrelatedCustCode != ''">
		AND		B.INTERRELATED_CUST_CODE = #{interrelatedCustCode}
		</if>
		<choose>
		<when test="certYn != null and certYn != ''">
		AND		A.CERT_YN = #{certYn}</when>
		<otherwise>
		AND		A.CERT_YN IN ('Y', 'D')
		</otherwise>
		</choose>
		<if test="custName != null and custName != ''">
		AND		A.CUST_NAME LIKE CONCAT('%', #{custName}, '%')
		</if>
		<if test="custTypeCode1 != null and custTypeCode1 != ''">
		AND		A.CUST_TYPE1 = #{custTypeCode1}
		</if>
	</sql>
	
	<select id="selectOtherCustList_count" resultType="int">
		/* cust.selectOtherCustList_count */
		SELECT	COUNT(1)
		FROM (
			SELECT	A.CUST_CODE
			FROM	T_CO_CUST_MASTER A
			LEFT OUTER JOIN T_CO_CUST_IR B
				ON A.CUST_CODE = B.CUST_CODE
			LEFT OUTER JOIN T_CO_INTERRELATED C
				ON B.INTERRELATED_CUST_CODE = C.INTERRELATED_CUST_CODE
			LEFT OUTER JOIN T_CO_ITEM D
				ON A.CUST_TYPE1 = D.ITEM_CODE
			LEFT OUTER JOIN T_CO_ITEM D2
				ON A.CUST_TYPE2 = D2.ITEM_CODE
			WHERE	A.CERT_YN = 'Y'
			AND		A.CUST_CODE NOT IN (
				SELECT	CUST_CODE
				FROM	T_CO_CUST_IR
				WHERE	INTERRELATED_CUST_CODE = #{custCode}
			)
			<if test="custType != null and custType != ''">
			AND		(A.CUST_TYPE1 = #{custType} OR A.CUST_TYPE2 = #{custType})
			</if>
			<if test="custName != null and custName != ''">
			AND		A.CUST_NAME LIKE CONCAT('%', #{custName}, '%')
			</if>
			GROUP BY A.CUST_CODE
		) A
	</select>
	
	<select id="selectOtherCustList" resultType="camel">
		/* cust.selectOtherCustList */
		SELECT	A.CUST_CODE
		,		A.CUST_NAME
		<![CDATA[
		,		CASE
					WHEN IFNULL(D2.ITEM_NAME, '') != ''
					THEN CONCAT('1. ', D.ITEM_NAME, '<br />', '2. ', D2.ITEM_NAME)
					ELSE CONCAT('1. ', D.ITEM_NAME)
				END							AS CUST_TYPE1
		]]>
		,		A.REGNUM
		,		PRES_NAME
		<![CDATA[
		,		GROUP_CONCAT(C.INTERRELATED_NM SEPARATOR '<br/>')	AS INTERRELATED_NM
		]]>
		FROM	T_CO_CUST_MASTER A
		LEFT OUTER JOIN T_CO_CUST_IR B
			ON A.CUST_CODE = B.CUST_CODE
		LEFT OUTER JOIN T_CO_INTERRELATED C
			ON B.INTERRELATED_CUST_CODE = C.INTERRELATED_CUST_CODE
		LEFT OUTER JOIN T_CO_ITEM D
			ON A.CUST_TYPE1 = D.ITEM_CODE
		LEFT OUTER JOIN T_CO_ITEM D2
			ON A.CUST_TYPE2 = D2.ITEM_CODE
		WHERE	A.CERT_YN = 'Y'
		AND		A.CUST_CODE NOT IN (
			SELECT	CUST_CODE
			FROM	T_CO_CUST_IR
			WHERE	INTERRELATED_CUST_CODE = #{custCode}
		)
		<if test="custType != null and custType != ''">
		AND		(A.CUST_TYPE1 = #{custType} OR A.CUST_TYPE2 = #{custType})
		</if>
		<if test="custName != null and custName != ''">
		AND		A.CUST_NAME LIKE CONCAT('%', #{custName}, '%')
		</if>
		GROUP BY A.CUST_CODE
		ORDER BY A.CREATE_DATE DESC
		<if test="pageSize != null and pageSize != ''">
		LIMIT ${offset}, ${pageSize}
		</if>
	</select>
	
	<select id="selectTCoCustDetail" resultType="hashMap">
		/* cust.selectTCoCustDetail */
		SELECT	A.CUST_CODE				AS custCode
		,		A.CUST_NAME				AS custName
		<![CDATA[
		,		GROUP_CONCAT(E.INTERRELATED_NM SEPARATOR '<br/>')	AS interrelatedNm
		]]>
		,		CUST_TYPE1				AS custType1
		,		CUST_TYPE2				AS custType2
		,		C.ITEM_NAME				AS custTypeNm1
		,		C2.ITEM_NAME			AS custTypeNm2
		,		A.REGNUM				AS regnum
		,		A.PRES_NAME				AS presName
		,		A.PRES_JUMIN_NO			AS presJuminNo
		,		A.CAPITAL				AS capital
		,		A.FOUND_YEAR			AS foundYear
		,		A.TEL					AS tel
		,		A.FAX					AS fax
		,		A.ZIPCODE				AS zipcode
		,		A.ADDR					AS addr
		,		A.ADDR_DETAIL			AS addrDetail
		,		A.REGNUM_FILE			AS regnumFileName
		,		IFNULL(A.REGNUM_PATH, '')	AS regnumPath
		,		A.B_FILE				AS bfileName
		,		IFNULL(A.B_FILE_PATH, '')	AS bfilePath
		,		A.CERT_YN				AS certYn
		,		A.ETC					AS etc
		,		D.CUST_LEVEL			AS custLevel
		,		D.CUST_VALUATION		AS custValuation
		,		D.CARE_CONTENT			AS careContent
		,		B.USER_NAME				AS userName
		,		B.USER_EMAIL			AS userEmail
		,		B.USER_ID				AS userId
		,		B.USER_HP				AS userHp
		,		B.USER_TEL				AS userTel
		,		B.USER_BUSEO			AS userBuseo
		,		B.USER_POSITION			As userPosition
		FROM T_CO_CUST_MASTER A
		LEFT OUTER JOIN (
			SELECT	CUST_CODE
			,		USER_ID
			,		USER_NAME
			,		USER_TEL
			,		USER_HP
			,		USER_EMAIL
			,		USER_BUSEO
			,		USER_POSITION
			FROM T_CO_CUST_USER
			WHERE CUST_CODE = #{custCode}
			AND USER_TYPE = '1'
			<!-- AND USE_YN = 'Y' -->
			LIMIT 1
		) B
			ON A.CUST_CODE = B.CUST_CODE
		LEFT OUTER JOIN T_CO_CUST_IR D
			ON A.CUST_CODE = D.CUST_CODE
		LEFT OUTER JOIN T_CO_INTERRELATED E
			ON D.INTERRELATED_CUST_CODE = E.INTERRELATED_CUST_CODE
		LEFT OUTER JOIN T_CO_ITEM C
			ON A.CUST_TYPE1 = C.ITEM_CODE
		LEFT OUTER JOIN T_CO_ITEM C2
			ON A.CUST_TYPE2 = C2.ITEM_CODE
		WHERE A.CUST_CODE = #{custCode}
		<if test="interrelatedCustCode != null and interrelatedCustCode != ''">
		AND D.INTERRELATED_CUST_CODE = #{interrelatedCustCode}
		</if>
	</select>
	
	<insert id="insertTCoCustMaster" parameterType="map" useGeneratedKeys="true" keyProperty="custCode">
		/* cust.insertTCoCustMaster */
		INSERT INTO T_CO_CUST_MASTER(
					CUST_TYPE1
		,			CUST_TYPE2
		,			CUST_NAME
		,			REGNUM
		,			PRES_NAME
		,			PRES_JUMIN_NO
		,			TEL
		,			FAX
		,			ZIPCODE
		,			ADDR
		,			ADDR_DETAIL
		,			CAPITAL
		,			FOUND_YEAR
		,			CERT_YN
		,			ETC
		,			CREATE_USER
		,			CREATE_DATE
		,			UPDATE_USER
		,			UPDATE_DATE
		,			INTERRELATED_CUST_CODE
		,			B_FILE
		,			B_FILE_PATH
		,			REGNUM_FILE
		,			REGNUM_PATH
		) VALUES (
					#{custType1}
		,			#{custType2}
		,			#{custName}
		,			#{regnum}
		,			#{presName}
		,			#{presJuminNo}
		,			#{tel}
		,			#{fax}
		,			#{zipcode}
		,			#{addr}
		,			#{addrDetail}
		,			#{capital}
		,			#{foundYear}
		,			#{certYn}
		,			#{etc}
		,			#{userId}
		,			NOW()
		,			#{userId}
		,			NOW()
		,			#{interrelatedCustCode}
		,			#{bFile}
		,			#{bFilePath}
		,			#{regnumFile}
		,			#{regnumPath}
		)
	</insert>
	
	<update id="updateTCoCustMasterCert">
		/* cust.updateTCoCustMasterCert */
		UPDATE T_CO_CUST_MASTER
		SET		CERT_YN		= #{certYn}
		,		ETC			= #{etc}
		,		UPDATE_USER	= #{userId}
		,		UPDATE_DATE	= NOW()
		WHERE CUST_CODE		= #{custCode}
	</update>
	
	<update id="updateTCoCustMaster">
		/* cust.updateTCoCustMaster */
		UPDATE T_CO_CUST_MASTER
		SET		CUST_NAME		= #{custName}
		,		REGNUM			= #{regnum}
		,		PRES_NAME		= #{presName}
		,		PRES_JUMIN_NO	= #{presJuminNo}
		,		TEL				= #{tel}
		,		FAX				= #{fax}
		,		ZIPCODE			= #{zipcode}
		,		ADDR			= #{addr}
		,		ADDR_DETAIL		= #{addrDetail}
		,		CAPITAL			= #{capital}
		,		FOUND_YEAR		= #{foundYear}
		,		B_FILE			= #{bFile}
		,		B_FILE_PATH		= #{bfilePath}
		,		REGNUM_FILE		= #{regnumFile}
		,		REGNUM_PATH		= #{regnumPath}
		,		UPDATE_USER		= #{userId}
		,		UPDATE_DATE		= NOW()
		WHERE CUST_CODE			= #{custCode}
	</update>
	
	<delete id="deleteTCoCustMaster">
		/* cust.deleteTCoCustMaster */
		DELETE FROM T_CO_CUST_MASTER
		WHERE CUST_CODE = #{custCode}
	</delete>
	
	<delete id="deleteTCoCustIr">
		/* cust.deleteTCoCustIr */
		DELETE FROM T_CO_CUST_IR
		WHERE CUST_CODE = #{custCode}
	</delete>
	
	<insert id="insertTCoCustHistory">
		/* cust.insertTCoCustHistory */
		INSERT INTO T_CO_CUST_MASTER_HIST (
				CUST_CODE
		,		CUST_TYPE1
		,		CUST_TYPE2
		,		CUST_NAME
		,		REGNUM
		,		PRES_NAME
		,		PRES_JUMIN_NO
		,		TEL
		,		FAX
		,		ZIPCODE
		,		ADDR
		,		ADDR_DETAIL
		,		CAPITAL
		,		FOUND_YEAR
		,		CERT_YN
		,		ETC
		,		CREATE_USER
		,		CREATE_DATE
		,		UPDATE_USER
		,		UPDATE_DATE
		,		INTERRELATED_CUST_CODE
		,		B_FILE
		,		B_FILE_PATH
		,		REGNUM_FILE
		,		REGNUM_PATH
		)
		SELECT	CUST_CODE
		,		CUST_TYPE1
		,		CUST_TYPE2
		,		CUST_NAME
		,		REGNUM
		,		PRES_NAME
		,		PRES_JUMIN_NO
		,		TEL
		,		FAX
		,		ZIPCODE
		,		ADDR
		,		ADDR_DETAIL
		,		CAPITAL
		,		FOUND_YEAR
		,		CERT_YN
		,		ETC
		,		CREATE_USER
		,		CREATE_DATE
		,		UPDATE_USER
		,		UPDATE_DATE
		,		INTERRELATED_CUST_CODE
		,		B_FILE
		,		B_FILE_PATH
		,		REGNUM_FILE
		,		REGNUM_PATH
		FROM T_CO_CUST_MASTER
		WHERE CUST_CODE = #{custCode}
	</insert>
	
	<insert id="mergeTCoCustIR">
		/* cust.mergeTCoCustIR */
		INSERT INTO T_CO_CUST_IR (
				CUST_CODE
		,		INTERRELATED_CUST_CODE
		,		CUST_LEVEL
		,		CUST_VALUATION
		,		CARE_CONTENT
		,		CERT_DATE
		) VALUES (
				#{custCode}
		,		#{interrelatedCustCode}
		,		#{custLevel}
		,		#{custValuation}
		,		#{careContent}
		,		NOW()
		)
		ON DUPLICATE KEY
		UPDATE	CUST_LEVEL		= #{custLevel}
		,		CUST_VALUATION	= #{custValuation}
		,		CARE_CONTENT	= #{careContent}
		,		CERT_DATE		= NOW() 
	</insert>
</mapper>